// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.Closure$draw = [K, {"": "Closure;call$1,$name"}];

$$.Closure$toStringWrapper = [H, {"": "Closure;call$0,$name"}];

$$.Closure$invokeClosure = [H, {"": "Closure;call$5,$name"}];

$$.Closure$typeNameInChrome = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInSafari = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInOpera = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInFirefox = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInIE = [H, {"": "Closure;call$1,$name"}];

$$.Closure$constructorNameFallback = [H, {"": "Closure;call$1,$name"}];

$$.Closure$callDartFunctionWith1Arg = [H, {"": "Closure;call$2,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["ParticleCube.dart", "ParticleCube.dart", , K, {
main: function() {
  var last, i, t1, t2, t3, t4, t5, t6, t7, t8, particle, t9;
  $.canvas = document.querySelector("#container");
  $.context = J.get$context2D$x($.canvas);
  $._width = $.canvas.parentElement.clientWidth;
  $._height = $.canvas.parentElement.clientHeight;
  J.set$width$x($.canvas, $._width);
  for (last = null, i = 0; i < 5000; ++i, last = particle) {
    $.get$random();
    t1 = Math.random();
    t2 = $.get$_bounds().storage;
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(0);
    t2 = t2[0];
    $.get$random();
    t3 = Math.random();
    t4 = $.get$_bounds().storage;
    if (1 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(1);
    t4 = t4[1];
    $.get$random();
    t5 = Math.random();
    t6 = $.get$_bounds().storage;
    if (2 >= C.JS_CONST_ZYJ(t6))
      throw H.ioore(2);
    t6 = t6[2];
    $.get$random();
    t7 = Math.random() * 255 >>> 0;
    t7 = "#" + t7.toString(16);
    $.get$random();
    t8 = Math.random() * 255 >>> 0;
    t7 += t8.toString(16);
    $.get$random();
    t8 = Math.random() * 255 >>> 0;
    particle = new K.Particle(null, null, t7 + t8.toString(16));
    t7 = new Float32Array(3);
    t7.$dartCachedLength = t7.length;
    t7 = new T.Vector3(t7);
    t8 = t7.storage;
    t9 = C.JS_CONST_ZYJ(t8);
    if (0 >= t9)
      throw H.ioore(0);
    t8[0] = t1 * t2;
    if (1 >= t9)
      throw H.ioore(1);
    t8[1] = t3 * t4;
    if (2 >= t9)
      throw H.ioore(2);
    t8[2] = t5 * t6;
    particle._pt = t7;
    if (last != null)
      last.next = particle;
    if ($.Particle_start == null)
      $.Particle_start = particle;
  }
  t1 = $.context;
  t1.fillStyle = "#FFFFFF";
  t1.setTransform(1, 0, 0, 1, 0, 0);
  t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, K.draw$closure);
},

draw: function(_) {
  var t1, t2, t3, t4, particle, truncated;
  K.drawBackground();
  $.get$matrix4().setIdentity$0();
  t1 = $.get$matrix4();
  t2 = $.get$_bounds().storage;
  if (0 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(0);
  t2 = t2[0];
  t3 = $.get$_bounds().storage;
  if (1 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(1);
  t3 = t3[1];
  t4 = $.get$_bounds().storage;
  if (2 >= C.JS_CONST_ZYJ(t4))
    throw H.ioore(2);
  t1.translate$3(t1, t2 * 0.5, t3 * 0.5, t4[2] * 0.5);
  $.get$matrix4().rotateX$1($._rotation);
  $.get$matrix4().rotateY$1($._rotation);
  $.get$matrix4().rotateZ$1($._rotation);
  t4 = $.get$matrix4();
  t3 = $.get$_bounds().storage;
  if (0 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(0);
  t3 = t3[0];
  t2 = $.get$_bounds().storage;
  if (1 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(1);
  t2 = t2[1];
  t1 = $.get$_bounds().storage;
  if (2 >= C.JS_CONST_ZYJ(t1))
    throw H.ioore(2);
  t4.translate$3(t4, -t3 * 0.5, -t2 * 0.5, -t1[2] * 0.5);
  $._rotation = 0.005;
  particle = $.Particle_start;
  for (; particle != null;) {
    particle.draw$0;
    K.Particle_get2DLoc(particle._pt, $.get$Particle__screenPt());
    t1 = $.context;
    t1.fillStyle = particle._color;
    t2 = $.get$Particle__screenPt().storage;
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(0);
    t2 = t2[0];
    if (isNaN(t2))
      H.throwExpression(new P.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      H.throwExpression(new P.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    t2 = truncated == -0.0 ? 0 : truncated;
    t3 = $.get$Particle__screenPt().storage;
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(1);
    t3 = t3[1];
    if (isNaN(t3))
      H.throwExpression(new P.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      H.throwExpression(new P.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    t3 = truncated == -0.0 ? 0 : truncated;
    t4 = $.PARTICLE_SIZE;
    t1.fillRect(t2, t3, t4, t4);
    particle = particle.next;
  }
  t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, K.draw$closure);
},

drawBackground: function() {
  $.context.save();
  $.context.transform(1, 0, 0, 1, 0, 0);
  $.context.clearRect(0, 0, $._width, $._height);
  $.context.restore();
},

Particle: {"": "Object;next,_pt,_color", static: {
"": "Particle_start,Particle__screenPt",
Particle_get2DLoc: function(pt, result) {
  var v, t1, t2, t3, t4, t5;
  v = $.get$matrix4().transform3$1(pt);
  v.applyProjection$1($.get$matrix4());
  t1 = v.storage;
  if (0 >= C.JS_CONST_ZYJ(t1))
    throw H.ioore(0);
  t2 = t1[0];
  t3 = $._width;
  t4 = $.get$_bounds().storage;
  if (0 >= C.JS_CONST_ZYJ(t4))
    throw H.ioore(0);
  t4 = t4[0];
  if (t3 == null)
    throw t3.$sub();
  t5 = result.storage;
  if (0 >= C.JS_CONST_ZYJ(t5))
    throw H.ioore(0);
  t5[0] = t2 + (t3 - t4) * 0.5;
  if (1 >= C.JS_CONST_ZYJ(t1))
    throw H.ioore(1);
  t1 = t1[1];
  t4 = $._height;
  t3 = $.get$_bounds().storage;
  if (1 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(1);
  t3 = t3[1];
  if (t4 == null)
    throw t4.$sub();
  if (1 >= C.JS_CONST_ZYJ(t5))
    throw H.ioore(1);
  t5[1] = t1 + (t4 - t3) * 0.5;
}}
}},
1],
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = H.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return J.getNativeInterceptor(object);
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  }
},

JavaScriptObject: {"": "Interceptor;"},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $isList: true
},

JSMutableArray: {"": "JSArray;",
  $asJSArray: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;"},

JSNumber: {"": "num/Interceptor;",
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw H.wrapException(new P.RangeError("value " + index));
    if (index >= receiver.length)
      throw H.wrapException(new P.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      H.throwExpression(new P.ArgumentError(endIndex));
    if (startIndex < 0)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (endIndex == null)
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  $isString: true
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(new P.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = H.constructorNameFallback(J.getInterceptor(object));
  if (J.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

iae: function(argument) {
  throw H.wrapException(new P.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(new P.RangeError("value " + H.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return new H.invokeClosure_closure(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1))
    return new H.invokeClosure_closure0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2))
    return new H.invokeClosure_closure1(closure, arg1, arg2).call$0();
  else
    throw H.wrapException(new P._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($, H.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + H.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = H.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return H.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return H.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return H.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return H.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return H.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return H.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return H.typeNameInSafari$closure;
  else
    return H.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new H.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})(H.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsExtended: function(tags, interceptorClass, subclassInterceptorClasses) {
  var classes, t1, i;
  if ($.interceptorToTag == null)
    $.interceptorToTag = [];
  classes = subclassInterceptorClasses;
  for (t1 = classes.length, i = 0; i < t1; ++i) {
    $.interceptorToTag.push(classes[i]);
    $.interceptorToTag.push(tags);
  }
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = H.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = H.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = H.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return H.makeLeafDispatchRecord(interceptor);
  else
    return J.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  }
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

FixedLengthListMixin: {"": "Object;"}}],
["dart.collection", "dart:collection", , P, {
ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw H.ioore(i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = P.StringBuffer$("");
    try {
      $.get$ListMixin__toStringList().push(receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw H.ioore(0);
      t1.pop();
    }
    return result.get$_contents();
  }
}}],
["dart.core", "dart:core", , P, {
Error_safeToString: function(object) {
  return H.Primitives_objectToString(object);
},

List_List: function($length) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

Error: {"": "Object;"},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + P.Error_safeToString(this.modifiedObject) + ".";
  }
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    return "Exception: " + this.message;
  }
},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StringBuffer: {"": "Object;_contents<",
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator._current;
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator._current);
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator._current;
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

}}],
["dart.dom.html", "dart:html", , W, {
HtmlElement: {"": "Element;"},

AnchorElement: {"": "HtmlElement;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

CanvasElement: {"": "HtmlElement;width}",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  }
},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;",
  toString$0: function(receiver) {
    return receiver.localName;
  }
},

EmbedElement: {"": "HtmlElement;width}"},

EventTarget: {"": "Interceptor;"},

IFrameElement: {"": "HtmlElement;width}"},

ImageElement: {"": "HtmlElement;width}"},

InputElement: {"": "HtmlElement;width}"},

MediaElement: {"": "HtmlElement;"},

Node: {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  }
},

ObjectElement: {"": "HtmlElement;width}"},

VideoElement: {"": "MediaElement;width}"},

Window: {"": "EventTarget;",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
}}],
["dart.math", "dart:math", , P, {
_Random: {"": "Object;"}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData_ListMixin: {"": "TypedData+ListMixin;"},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;"},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    if (index < 0 || index >= $length)
      throw H.wrapException(new P.RangeError("value " + index + " not in range 0.." + $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + index));
  }
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $asJavaScriptIndexingBehavior: null,
  $isJavaScriptIndexingBehavior: true
}}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
Matrix4: {"": "Object;storage",
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n[3] " + H.S(this.getRow$1(3)) + "\n";
  },
  getRow$1: function(row) {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    t4 = C.JS_CONST_ZYJ(t2);
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t3);
    t3 = t2[t3];
    t5 = C.JS_CONST_ZYJ(t1);
    if (0 >= t5)
      throw H.ioore(0);
    t1[0] = t3;
    t3 = 4 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw H.ioore(1);
    t1[1] = t3;
    t3 = 8 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t3);
    t3 = t2[t3];
    if (2 >= t5)
      throw H.ioore(2);
    t1[2] = t3;
    t3 = 12 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t3);
    t3 = t2[t3];
    if (3 >= t5)
      throw H.ioore(3);
    t1[3] = t3;
    return r;
  },
  translate$3: function(_, x, y, z) {
    var t1, tw, tx, ty, tz, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
    t1 = typeof x === "object" && x !== null && !!C.JSNumber_methods.$isVector4;
    tw = t1 ? x.get$w() : 1;
    if (typeof x === "object" && x !== null && !!C.JSNumber_methods.$isVector3 || t1) {
      tx = C.JSNumber_methods.get$x(x);
      ty = C.JSNumber_methods.get$y(x);
      tz = C.JSNumber_methods.get$z(x);
    } else {
      tz = z;
      ty = y;
      tx = x;
    }
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    t3 = t1[0];
    if (typeof tx !== "number")
      throw H.iae(tx);
    if (4 >= t2)
      throw H.ioore(4);
    t4 = t1[4];
    if (typeof ty !== "number")
      throw H.iae(ty);
    if (8 >= t2)
      throw H.ioore(8);
    t5 = t1[8];
    if (typeof tz !== "number")
      throw H.iae(tz);
    if (12 >= t2)
      throw H.ioore(12);
    t6 = t1[12];
    t7 = t1[1];
    t8 = t1[5];
    t9 = t1[9];
    if (13 >= t2)
      throw H.ioore(13);
    t10 = t1[13];
    t11 = t1[2];
    t12 = t1[6];
    t13 = t1[10];
    if (14 >= t2)
      throw H.ioore(14);
    t14 = t1[14];
    t15 = t1[3];
    t16 = t1[7];
    t17 = t1[11];
    if (15 >= t2)
      throw H.ioore(15);
    t2 = t1[15];
    t1[12] = t3 * tx + t4 * ty + t5 * tz + t6 * tw;
    t1[13] = t7 * tx + t8 * ty + t9 * tz + t10 * tw;
    t1[14] = t11 * tx + t12 * ty + t13 * tz + t14 * tw;
    t1[15] = t15 * tx + t16 * ty + t17 * tz + t2 * tw;
    return this;
  },
  rotateX$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    cosAngle = Math.cos(angle);
    sinAngle = Math.sin(angle);
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (4 >= t2)
      throw H.ioore(4);
    t3 = t1[4];
    if (8 >= t2)
      throw H.ioore(8);
    t4 = t1[8];
    t5 = t1[5];
    if (9 >= t2)
      throw H.ioore(9);
    t6 = t1[9];
    t7 = t1[6];
    if (10 >= t2)
      throw H.ioore(10);
    t8 = t1[10];
    t9 = t1[7];
    if (11 >= t2)
      throw H.ioore(11);
    t2 = t1[11];
    t10 = -sinAngle;
    t1[4] = t3 * cosAngle + t4 * sinAngle;
    t1[5] = t5 * cosAngle + t6 * sinAngle;
    t1[6] = t7 * cosAngle + t8 * sinAngle;
    t1[7] = t9 * cosAngle + t2 * sinAngle;
    t1[8] = t3 * t10 + t4 * cosAngle;
    t1[9] = t5 * t10 + t6 * cosAngle;
    t1[10] = t7 * t10 + t8 * cosAngle;
    t1[11] = t9 * t10 + t2 * cosAngle;
    return this;
  },
  rotateY$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    cosAngle = Math.cos(angle);
    sinAngle = Math.sin(angle);
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    t3 = t1[0];
    if (8 >= t2)
      throw H.ioore(8);
    t4 = t1[8];
    t5 = t1[1];
    if (9 >= t2)
      throw H.ioore(9);
    t6 = t1[9];
    t7 = t1[2];
    if (10 >= t2)
      throw H.ioore(10);
    t8 = t1[10];
    t9 = t1[3];
    if (11 >= t2)
      throw H.ioore(11);
    t2 = t1[11];
    t10 = -sinAngle;
    t1[0] = t3 * cosAngle + t4 * sinAngle;
    t1[1] = t5 * cosAngle + t6 * sinAngle;
    t1[2] = t7 * cosAngle + t8 * sinAngle;
    t1[3] = t9 * cosAngle + t2 * sinAngle;
    t1[8] = t3 * t10 + t4 * cosAngle;
    t1[9] = t5 * t10 + t6 * cosAngle;
    t1[10] = t7 * t10 + t8 * cosAngle;
    t1[11] = t9 * t10 + t2 * cosAngle;
    return this;
  },
  rotateZ$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    cosAngle = Math.cos(angle);
    sinAngle = Math.sin(angle);
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    t3 = t1[0];
    if (4 >= t2)
      throw H.ioore(4);
    t4 = t1[4];
    t5 = t1[1];
    if (5 >= t2)
      throw H.ioore(5);
    t6 = t1[5];
    t7 = t1[2];
    if (6 >= t2)
      throw H.ioore(6);
    t8 = t1[6];
    t9 = t1[3];
    if (7 >= t2)
      throw H.ioore(7);
    t2 = t1[7];
    t10 = -sinAngle;
    t1[0] = t3 * cosAngle + t4 * sinAngle;
    t1[1] = t5 * cosAngle + t6 * sinAngle;
    t1[2] = t7 * cosAngle + t8 * sinAngle;
    t1[3] = t9 * cosAngle + t2 * sinAngle;
    t1[4] = t3 * t10 + t4 * cosAngle;
    t1[5] = t5 * t10 + t6 * cosAngle;
    t1[6] = t7 * t10 + t8 * cosAngle;
    t1[7] = t9 * t10 + t2 * cosAngle;
    return this;
  },
  setIdentity$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    t1[0] = 1;
    if (1 >= t2)
      throw H.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw H.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw H.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw H.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw H.ioore(5);
    t1[5] = 1;
    if (6 >= t2)
      throw H.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw H.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw H.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw H.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw H.ioore(10);
    t1[10] = 1;
    if (11 >= t2)
      throw H.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw H.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw H.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw H.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw H.ioore(15);
    t1[15] = 1;
    return this;
  },
  transform3$1: function(arg) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    t3 = t1[0];
    t4 = arg.storage;
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(0);
    t6 = t4[0];
    if (4 >= t2)
      throw H.ioore(4);
    t7 = t1[4];
    if (1 >= t5)
      throw H.ioore(1);
    t8 = t4[1];
    if (8 >= t2)
      throw H.ioore(8);
    t9 = t1[8];
    if (2 >= t5)
      throw H.ioore(2);
    t5 = t4[2];
    if (12 >= t2)
      throw H.ioore(12);
    t10 = t1[12];
    t11 = t1[1];
    t12 = t1[5];
    t13 = t1[9];
    if (13 >= t2)
      throw H.ioore(13);
    t14 = t1[13];
    t15 = t1[2];
    t16 = t1[6];
    t17 = t1[10];
    if (14 >= t2)
      throw H.ioore(14);
    t1 = t1[14];
    t4[0] = t3 * t6 + t7 * t8 + t9 * t5 + t10;
    t4[1] = t11 * t6 + t12 * t8 + t13 * t5 + t14;
    t4[2] = t15 * t6 + t16 * t8 + t17 * t5 + t1;
    return arg;
  }
},

Vector2: {"": "Object;storage",
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(0);
    t2 = "[" + H.S(t1[0]) + ",";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(1);
    return t2 + H.S(t1[1]) + "]";
  }
},

Vector3: {"": "Object;storage",
  setValues$3: function(x_, y_, z_) {
    var t1, t2;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw H.ioore(1);
    t1[1] = y_;
    if (2 >= t2)
      throw H.ioore(2);
    t1[2] = z_;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(0);
    t2 = "[" + H.S(t1[0]) + ",";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(1);
    t2 = t2 + H.S(t1[1]) + ",";
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(2);
    return t2 + H.S(t1[2]) + "]";
  },
  applyProjection$1: function(arg) {
    var t1, t2, _x, _y, _z, t3, t4, t5, t6, d;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(0);
    _x = t1[0];
    if (1 >= t2)
      throw H.ioore(1);
    _y = t1[1];
    if (2 >= t2)
      throw H.ioore(2);
    _z = t1[2];
    t2 = arg.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (3 >= t3)
      throw H.ioore(3);
    t4 = t2[3];
    if (7 >= t3)
      throw H.ioore(7);
    t5 = t2[7];
    if (11 >= t3)
      throw H.ioore(11);
    t6 = t2[11];
    if (15 >= t3)
      throw H.ioore(15);
    d = 1 / (t4 * _x + t5 * _y + t6 * _z + t2[15]);
    t1[0] = (t2[0] * _x + t2[4] * _y + t2[8] * _z + t2[12]) * d;
    t1[1] = (t2[1] * _x + t2[5] * _y + t2[9] * _z + t2[13]) * d;
    t1[2] = (t2[2] * _x + t2[6] * _y + t2[10] * _z + t2[14]) * d;
    return this;
  },
  $isVector3: true
},

Vector4: {"": "Object;storage",
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(0);
    t2 = H.S(t1[0]) + ",";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(1);
    t2 = t2 + H.S(t1[1]) + ",";
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(2);
    t2 = t2 + H.S(t1[2]) + ",";
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(3);
    return t2 + H.S(t1[3]);
  },
  get$w: function() {
    var t1 = this.storage;
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(3);
    return t1[3];
  },
  $isVector4: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.draw$closure = K.draw$closure = new K.Closure$draw(K.draw, "draw$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$toStringWrapper(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$invokeClosure(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.typeNameInChrome$closure = H.typeNameInChrome$closure = new H.Closure$typeNameInChrome(H.typeNameInChrome, "typeNameInChrome$closure");
init.globalFunctions.typeNameInSafari$closure = H.typeNameInSafari$closure = new H.Closure$typeNameInSafari(H.typeNameInSafari, "typeNameInSafari$closure");
init.globalFunctions.typeNameInOpera$closure = H.typeNameInOpera$closure = new H.Closure$typeNameInOpera(H.typeNameInOpera, "typeNameInOpera$closure");
init.globalFunctions.typeNameInFirefox$closure = H.typeNameInFirefox$closure = new H.Closure$typeNameInFirefox(H.typeNameInFirefox, "typeNameInFirefox$closure");
init.globalFunctions.typeNameInIE$closure = H.typeNameInIE$closure = new H.Closure$typeNameInIE(H.typeNameInIE, "typeNameInIE$closure");
init.globalFunctions.constructorNameFallback$closure = H.constructorNameFallback$closure = new H.Closure$constructorNameFallback(H.constructorNameFallback, "constructorNameFallback$closure");
init.globalFunctions.callDartFunctionWith1Arg$closure = H.callDartFunctionWith1Arg$closure = new H.Closure$callDartFunctionWith1Arg(H.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
// Runtime type support
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C_UnknownJavaScriptObject = new J.UnknownJavaScriptObject();
C.C__Random = new P._Random();
C.JSNumber_methods = J.JSNumber.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.Window_methods = W.Window.prototype;
$.PARTICLE_SIZE = 2;
$.canvas = null;
$.context = null;
$._width = null;
$._height = null;
$._rotation = 0;
$.Particle_start = null;
$.interceptorsByTag = null;
$.leafTags = null;
$.interceptorToTag = null;
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
$.mapTypeToInterceptor = [];
Isolate.$lazy($, "_bounds", "_bounds", "get$_bounds", function() {
  var t1, t2, t3;
  t1 = $._width;
  if (t1 == null)
    throw t1.$mul();
  t2 = $._height;
  if (t2 == null)
    throw t2.$mul();
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setValues$3(t1 * 0.5, t2 * 0.5, 100);
  return t3;
});
Isolate.$lazy($, "matrix4", "matrix4", "get$matrix4", function() {
  var t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Matrix4(t1);
  t1.setIdentity$0();
  return t1;
});
Isolate.$lazy($, "random", "random", "get$random", function() {
  return C.C__Random;
});
Isolate.$lazy($, "_screenPt", "Particle__screenPt", "get$Particle__screenPt", function() {
  var t1, t2, t3;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector2(t1);
  t2 = t1.storage;
  t3 = C.JS_CONST_ZYJ(t2);
  if (0 >= t3)
    throw H.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw H.ioore(1);
  t2[1] = 0;
  return t1;
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return H.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null);
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return P.List_List(null);
});
// Native classes
H.defineNativeMethods("AutocompleteErrorEvent|CanvasGradient|CanvasPattern|CanvasRenderingContext|CanvasRenderingContext2D|DOMError|ErrorEvent|Event|FileError|MediaError|MediaKeyError|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedTransformList|SpeechRecognitionError", J.Interceptor);

H.defineNativeMethods("HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement", W.HtmlElement);

H.defineNativeMethodsNonleaf("HTMLElement", W.HtmlElement);

H.defineNativeMethods("HTMLAnchorElement", W.AnchorElement);

H.defineNativeMethods("HTMLCanvasElement", W.CanvasElement);

H.defineNativeMethods("DOMException", W.DomException);

H.defineNativeMethods("SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGGraphicsElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement", W.Element);

H.defineNativeMethodsNonleaf("Element", W.Element);

H.defineNativeMethods("HTMLEmbedElement", W.EmbedElement);

H.defineNativeMethodsNonleaf("EventTarget", W.EventTarget);

H.defineNativeMethods("HTMLIFrameElement", W.IFrameElement);

H.defineNativeMethods("HTMLImageElement", W.ImageElement);

H.defineNativeMethods("HTMLInputElement", W.InputElement);

H.defineNativeMethods("HTMLAudioElement", W.MediaElement);

H.defineNativeMethodsNonleaf("HTMLMediaElement", W.MediaElement);

H.defineNativeMethods("Document|HTMLDocument", W.Node);

H.defineNativeMethodsNonleaf("Node", W.Node);

H.defineNativeMethods("HTMLObjectElement", W.ObjectElement);

H.defineNativeMethods("HTMLVideoElement", W.VideoElement);

H.defineNativeMethods("DOMWindow|Window", W.Window);

H.defineNativeMethodsExtended("ArrayBufferView", P.TypedData, [P.TypedData_ListMixin, P.TypedData_ListMixin_FixedLengthListMixin]);

H.defineNativeMethods("Float32Array", P.Float32List);


init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function makeConstructor() {
    var str = "{\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var property in properties) {
      if (hasOwnProperty.call(properties, property)) {
        str += "this." + property + "= properties." + property + ";\n";
      }
    }
    str += "}\n";
    return new Function("properties", str);
  };
  var constructor = makeConstructor();
  return makeConstructor.prototype = new constructor(properties);
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { K.main(); });
  } else {
    K.main();
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
        if (reflectable) {
          prototype["get$" + accessorName].$reflectable = 1;
        }
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
        if (reflectable) {
          prototype["set$" + accessorName].$reflectable = 1;
        }
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var globalObject = isolateProperties;
        if (desc instanceof Array) {
          globalObject = desc[0] || isolateProperties;
          desc = desc[1];
        }
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return this." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = arguments.callee.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
})()

//# sourceMappingURL=ParticleCube.dart.js.map
//@ sourceMappingURL=ParticleCube.dart.js.map
